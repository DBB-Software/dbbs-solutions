
team_id = CredentialsManager::AppfileConfig.try_fetch_value(:team_id)
team_name = CredentialsManager::AppfileConfig.try_fetch_value(:team_name)
app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
package_name = CredentialsManager::AppfileConfig.try_fetch_value(:package_name)
json_key_file = CredentialsManager::AppfileConfig.try_fetch_value(:json_key_file)

app_connect_key_id = ENV["APP_CONNECT_KEY_ID"]
app_connect_issuer_id = ENV["APP_CONNECT_ISSUER_ID"]
android_app_id = ENV["ANDROID_APP_ID"]
ios_app_id = ENV["IOS_APP_ID"]
application_version = ENV["APPLICATION_VERSION"]
application_build_number = ENV["APPLICATION_BUILD_NUMBER"]
fastlane_keychain_name = ENV["FASTLANE_KEYCHAIN_NAME"]
keychain_password = ENV["FASTLANE_KEYCHAIN_PASSWORD"]

build_folder = "fastlane/builds"
xcodeproj_path = "ios/MobileApp.xcodeproj"
gradle_path = "android/app/build.gradle"
entitlements_file_path = "MobileApp/MobileApp.entitlements"

before_all do |lane, options|
  raise ArgumentError, "build variant is required!" unless options[:variant]
  # Define wich env file should be used
  env_file = options[:variant] == 'prod' ? '.env.production' : '.env.development'
  UI.success("Using env file: #{env_file}")
  Dotenv.load(env_file)
  check_env
end

lane :check_env do
  raise ArgumentError, "APPLICATION_VERSION ENV should be provided!" unless application_version
  raise ArgumentError, "APPLICATION_BUILD_NUMBER ENV should be provided!" unless application_build_number
  UI.success("APPLICATION_VERSION:#{application_version} and APPLICATION_BUILD_NUMBER:#{application_build_number} environments successfully loaded!")
end

platform :ios do
  desc "Increment Build number"
  lane :increment_build do
    increment_build_number(
      xcodeproj: xcodeproj_path,
      build_number: application_build_number
    )
    increment_version_number(
      xcodeproj: xcodeproj_path,
      version_number: application_version
    )
  end

  desc "Increment Build number in TestFlight"
  lane :increment_build_testflight do
    increment_build_number(
      xcodeproj: xcodeproj_path,
      build_number: application_build_number
    )
  end

  desc 'Fetch certificates and provisioning profiles'
  lane :certificates do |options|
    raise ArgumentError, "build type is required!" unless options[:type]

    type = options[:type]

    api_key = app_store_connect_api_key(
      key_id: app_connect_key_id,
      issuer_id: app_connect_issuer_id,
      key_filepath: "fastlane/api_key.p8",
      duration: 1200
    )

    create_keychain(
      name: fastlane_keychain_name,
      password: keychain_password,
      unlock: true,
      timeout: 0
    )

    match(
      api_key: api_key,
      app_identifier: app_identifier,
      type: type == "appstore" ? "appstore" : "adhoc",
      keychain_name: fastlane_keychain_name,
      keychain_password: keychain_password
    )

    get_provisioning_profile(
      api_key: api_key,
      team_id: team_id,
      app_identifier: app_identifier,
      adhoc: type == "appstore" ? false : true,
    )
  end

  desc "Prepare new IOS build!"
  lane :build do |options|
    raise ArgumentError, "build variant is required!" unless options[:variant]
    puts("VARIANT: #{options[:variant]}")

    variant = options[:variant]
    type = options[:type]
    scheme = variant == "prod" ? "DBBSExpo Prod" : "DBBSExpo Dev"

    certificates(variant: variant, type: type)
    increment_build(variant: variant)

    profile_uuid = lane_context[SharedValues::SIGH_UDID]
    update_code_signing_settings(
      use_automatic_signing: false,
      path: xcodeproj_path,
      team_id: team_id,
      bundle_identifier: app_identifier,
      entitlements_file_path: entitlements_file_path,
      profile_uuid: profile_uuid,
      code_sign_identity: "iPhone Distribution",
      sdk: "iphoneos*",
    )

    build_ios_app(
      scheme: scheme,
      workspace: "ios/DBBSExpo.xcworkspace",
      export_method: type == "appstore" ? "app-store" : "ad-hoc",
      export_team_id: team_id,
      output_directory: build_folder,
      output_name: "#{app_identifier}.ipa",
      configuration: "Release",
      build_path: "#{build_folder}/ios_build_path",
      build_timing_summary: true,
      silent: true,
    )
  end

  desc "Firebase distribution of iOS"
  lane :distribution do |options|

    firebase_app_distribution(
      app: ios_app_id,
      service_credentials_file: json_key_file,
      ipa_path: "#{build_folder}/#{app_identifier}.ipa",
      groups: "qa-team",
      release_notes_file: "../../CHANGELOG.md",
    )
  end

  desc "Upload to Test Flight"
  lane :beta do |options|

    bild_name = "#{app_identifier}.ipa"

    api_key = app_store_connect_api_key(
			key_id: app_connect_key_id,
			issuer_id: app_connect_issuer_id,
      key_filepath: "fastlane/api_key.p8",
			duration: 1200
		)

		upload_to_testflight(
			api_key: api_key,
			app_identifier: app_identifier,
			team_name: team_name,
			ipa: "#{build_folder}/#{bild_name}",
			skip_submission: true,
		)
  end

  desc "Upload release to App Store"
  lane :release do |options|

    bild_name = "#{app_identifier}.ipa"

    api_key = app_store_connect_api_key(
			key_id: app_connect_key_id,
			issuer_id: app_connect_issuer_id,
      key_filepath: "fastlane/api_key.p8",
			duration: 1200
		)

    deliver(
      api_key: api_key,
      app_version: application_version,
      app_identifier: app_identifier,
      team_name: team_name,
      ipa: "#{build_folder}/#{bild_name}",
      overwrite_screenshots: true,
      force: true
    )
  end

  desc "Create new app for App Store"
  lane :create_app do |options|
    raise ArgumentError, "New app identifier is required!" unless options[:id]
    raise ArgumentError, "New app name is required!" unless options[:name]
    raise ArgumentError, "New app main language is required!" unless options[:lang]

    new_app_id = options[:id]
    new_app_name = options[:name]
    language = options[:lang]
    init_app_version = "0.0.1"

    produce(
      app_identifier: new_app_id,
      app_name: new_app_name,
      language: language,
      team_id: team_id,
      team_name: team_name,
      company_name: team_name,
      sku: new_app_id,
      itc_team_name: team_name,
      app_version: init_app_version,
      enable_services: {
        push_notification: "on",
        game_center: "off"
      }
    )
  end
end

platform :android do
  desc "Increment Build number"
  lane :increment_build do
    increment_version_code(
      gradle_file_path: gradle_path,
      version_code: application_build_number
    )
    increment_version_name(
      gradle_file_path: gradle_path,
      version_name: application_version
    )
  end

  desc "Build a Release artifact (.aab and .apk)"
  lane :build do |options|
    raise ArgumentError, "build variant is required!" unless options[:variant]

    variant = options[:variant]
    type = options[:type]
    android_dir = File.expand_path("../android")
    gradlew_path = File.join(android_dir, "gradlew")
    aab_output_variant = variant == "prod" ? "prodRelease" : "devRelease"
    apk_output_variant = variant == "prod" ? "prod/release" : "dev/release"
    bild_varinat = variant == "prod" ? "app-prod-release" : "app-dev-release"
    gradle_assemble_task =  variant == "prod" ? "assembleProdRelease" : "assembleDevRelease"
    gradle_bundle_task = variant == "prod" ? "bundleProdRelease" : "bundleDevRelease"

    increment_build(variant: variant)

    gradle(
      task: type == "APK" ? gradle_assemble_task : gradle_bundle_task,
      project_dir: android_dir,
      gradle_path: gradlew_path
    )

    fastlane_build_directory = File.join(Dir.pwd, "builds")

    FileUtils.mkdir_p(fastlane_build_directory)

    aab_file_path = File.join(Dir.pwd, "..", "android", "app", "build", "outputs", "bundle", aab_output_variant, "#{bild_varinat}.aab")
    apk_file_path = File.join(Dir.pwd, "..", "android", "app", "build", "outputs", "apk", apk_output_variant, "#{bild_varinat}.apk")

    build_to_copy = type == "APK" ? apk_file_path : aab_file_path

    FileUtils.cp(build_to_copy, fastlane_build_directory)

    puts "Build completed. .aab file saved in #{fastlane_build_directory}."
  end

  desc "Firebase distribution of Android"
  lane :distribution do |options|
    raise ArgumentError, "build variant is required!" unless options[:variant]

    variant = options[:variant]
    bild_varinat = variant == "prod" ? "app-prod-release" : "app-dev-release"

    firebase_app_distribution(
      app: android_app_id,
      service_credentials_file: json_key_file,
      android_artifact_type: "APK",
      android_artifact_path: "#{build_folder}/#{bild_varinat}.apk",
      groups: "qa-team",
      release_notes_file: "./CHANGELOG.md",
    )
  end

  desc "Upload to Play Store beta"
  lane :beta do |options|
    raise ArgumentError, "build variant is required!" unless options[:variant]

    variant = options[:variant]
    bild_varinat = variant == "prod" ? "app-prod-release" : "app-dev-release"

		upload_to_play_store(
			package_name: package_name,
			track: "internal",
			version_name: application_version,
			aab: "#{build_folder}/#{bild_varinat}.aab",
			skip_upload_metadata: true,
			skip_upload_images: true,
			skip_upload_screenshots: true,
		)
  end

  desc "Upload release to Play Store"
  lane :release do |options|

		upload_to_play_store(
			package_name: app_identifier,
			track: "production",
			version_name: application_version,
			aab: "#{build_folder}/app-prod-release.aab"
		)
  end
end
