import React from 'react'
import { SafeAreaProvider } from 'react-native-safe-area-context'
import { AppNavigator } from '@navigators/app-navigator'
import { PaperProvider, Toaster, useDefinedTheme } from '@dbbs/mobile-components'
import { detectAppLanguage } from '@dbbs/mobile-common'
import { PushNotificationsProvider, RemoteConfigProvider } from '@dbbs/mobile-firebase'
{{#if isReactNative}}
import { useRNCliDisplayNotification } from '@dbbs/mobile-react-native-notifications'
{{/if}}
{{#if isExpo}}
import { handleExpoPushNotification, useExpoDisplayNotification } from '@dbbs/mobile-expo-notifications'
{{/if}}
{{#ifCond storage '===' 'redux'}}
import { Provider, store } from '@dbbs/mobile-redux-storage'
{{/ifCond}}
{{#ifCond storage '===' 'jotai'}}
import { Provider, createStore } from '@dbbs/mobile-jotai-storage'
{{/ifCond}}
import { initSentry } from '../sentry'
import { initialRemoteConfigValues } from './remote/remote-config-values'

import * as resources from './locale'
import '@dbbs/react-localization-provider'

initSentry()

detectAppLanguage(resources)

{{#ifCond storage '===' 'jotai'}}
const store = createStore()
{{/ifCond}}

const fcm = messaging()
{{#if isReactNative}}
fcm.setBackgroundMessageHandler(notifee.displayNotification)
{{/if}}
{{#if isExpo}}
fcm.setBackgroundMessageHandler(handleExpoPushNotification)
setNotificationHandler({
  // Require for expo-notifications
  handleNotification: async () => ({
    shouldShowAlert: true,
    shouldPlaySound: true,
    shouldSetBadge: false
  })
})
{{/if}}

export const App = () => {
  const paperTheme = useDefinedTheme()
  {{#if isReactNative}}
  useRNCliDisplayNotification()
  {{/if}}
  {{#if isExpo}}
  useExpoDisplayNotification()
  {{/if}}
  return (
    {{#ifCond storage '===' 'none'}}
    <PushNotificationsProvider>
      <PaperProvider theme={paperTheme}>
        <RemoteConfigProvider initialValues={initialRemoteConfigValues}>
            <SafeAreaProvider>
              <AppNavigator />
              <Toaster />
            </SafeAreaProvider>
        </RemoteConfigProvider>
      </PaperProvider>
    </PushNotificationsProvider>
    {{/ifCond}}
    {{#ifCond storage '!==' 'none'}}
    <PushNotificationsProvider>
      <Provider store={store}>
        <PaperProvider theme={paperTheme}>
          <RemoteConfigProvider initialValues={initialRemoteConfigValues}>
            <SafeAreaProvider>
              <AppNavigator />
              <Toaster />
            </SafeAreaProvider>
          </RemoteConfigProvider>
        </PaperProvider>
      </Provider>
    </PushNotificationsProvider>
    {{/ifCond}}
  )
}
