import fs from 'fs'
import path from 'path'
import dotenv from 'dotenv'
import { execSync } from 'child_process'
import { ConfigContext } from 'expo/config'
import loadConfig, { type ExtendedExpoConfig } from '../app.config'

const main = () => {
  const folder = path.resolve(__dirname, '..').split('/').pop()
  const scriptsFolder = path.resolve(__dirname, '..', '..', '..', '..', 'scripts')
  const config = loadConfig({} as ConfigContext) as ExtendedExpoConfig
  const envFile = `.env.${process.env.NODE_ENV}`
  const envFilePath = path.resolve(__dirname, '..', envFile)
  const envConfig = dotenv.config({ path: envFilePath })

  const packageJsonPath = path.resolve(__dirname, '..', 'package.json')
  const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf-8'))

  const extendedExpoPluginsPath = path.resolve(__dirname, '..', 'extended-expo-plugins.json')
  const extendedExpoPlugins = JSON.parse(fs.readFileSync(extendedExpoPluginsPath, 'utf-8'))

  if (!envConfig.parsed) {
    throw new Error(`Invalid env file: ${envFilePath}`)
  }

  const parsedConfig = Object.entries(envConfig.parsed)
    .map(([key, value]) => `${key}=${value}`)
    .join('\n')

  const checkIfIapEnabled = () => {
    const dependencyName = '@dbbs/mobile-iap'
    const { iapPluginEnabled } = extendedExpoPlugins

    if (!iapPluginEnabled) {
      return { iapPluginEnabled: false, isIapPresentInPackageJson: false }
    }

    const isDependencyPresentInPackageJson = packageJson.dependencies?.[dependencyName]

    return { iapPluginEnabled, isIapPresentInPackageJson: !!isDependencyPresentInPackageJson }
  }

  const { iapPluginEnabled, isIapPresentInPackageJson } = checkIfIapEnabled()

  execSync(
    `cd .. && npx turbo gen expo-prebuild --args '${folder}' '${config.name}' '${config.appNameProd}' '${config.appNameDev ?? config.appNameProd}' '${config.android?.package}' '${iapPluginEnabled ? 'y' : 'n'}' ${isIapPresentInPackageJson ? 'y' : 'n'}`,
    {
      stdio: 'inherit'
    }
  )
  execSync(`cd ${scriptsFolder} && tsx ./manage-credentials --folder ${folder}`, {
    stdio: 'inherit'
  })

  const shell = process.env.SHELL
  const profile = shell?.split('/').pop()
  const nodeBinaryPath = execSync(`${profile} -i -c "which node"`).toString().trim()
  execSync(`echo "export NODE_BINARY=${nodeBinaryPath}" > ios/.xcode.env.local`)

  const xcconfigPath = path.resolve(__dirname, '..', 'ios', 'Config.xcconfig')
  const xcconfigScriptPath = path.resolve(__dirname, 'add_xcconfig.rb')
  fs.writeFileSync(xcconfigPath, parsedConfig)
  execSync(`bundle exec ruby ${xcconfigScriptPath}`, { stdio: 'inherit' })
}

main()
