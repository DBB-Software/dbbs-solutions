/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TypeImport } from './routes/type'
import { Route as IndexImport } from './routes/index'
import { Route as ProductIndexImport } from './routes/product/index'
import { Route as ProductCreateImport } from './routes/product/create'
import { Route as ProductProductIdEditImport } from './routes/product/$productId/edit'

// Create/Update Routes

const TypeRoute = TypeImport.update({
  id: '/type',
  path: '/type',
  getParentRoute: () => rootRoute
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute
} as any)

const ProductIndexRoute = ProductIndexImport.update({
  id: '/product/',
  path: '/product/',
  getParentRoute: () => rootRoute
} as any)

const ProductCreateRoute = ProductCreateImport.update({
  id: '/product/create',
  path: '/product/create',
  getParentRoute: () => rootRoute
} as any)

const ProductProductIdEditRoute = ProductProductIdEditImport.update({
  id: '/product/$productId/edit',
  path: '/product/$productId/edit',
  getParentRoute: () => rootRoute
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/type': {
      id: '/type'
      path: '/type'
      fullPath: '/type'
      preLoaderRoute: typeof TypeImport
      parentRoute: typeof rootRoute
    }
    '/product/create': {
      id: '/product/create'
      path: '/product/create'
      fullPath: '/product/create'
      preLoaderRoute: typeof ProductCreateImport
      parentRoute: typeof rootRoute
    }
    '/product/': {
      id: '/product/'
      path: '/product'
      fullPath: '/product'
      preLoaderRoute: typeof ProductIndexImport
      parentRoute: typeof rootRoute
    }
    '/product/$productId/edit': {
      id: '/product/$productId/edit'
      path: '/product/$productId/edit'
      fullPath: '/product/$productId/edit'
      preLoaderRoute: typeof ProductProductIdEditImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/type': typeof TypeRoute
  '/product/create': typeof ProductCreateRoute
  '/product': typeof ProductIndexRoute
  '/product/$productId/edit': typeof ProductProductIdEditRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/type': typeof TypeRoute
  '/product/create': typeof ProductCreateRoute
  '/product': typeof ProductIndexRoute
  '/product/$productId/edit': typeof ProductProductIdEditRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/type': typeof TypeRoute
  '/product/create': typeof ProductCreateRoute
  '/product/': typeof ProductIndexRoute
  '/product/$productId/edit': typeof ProductProductIdEditRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/type' | '/product/create' | '/product' | '/product/$productId/edit'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/type' | '/product/create' | '/product' | '/product/$productId/edit'
  id: '__root__' | '/' | '/type' | '/product/create' | '/product/' | '/product/$productId/edit'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  TypeRoute: typeof TypeRoute
  ProductCreateRoute: typeof ProductCreateRoute
  ProductIndexRoute: typeof ProductIndexRoute
  ProductProductIdEditRoute: typeof ProductProductIdEditRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  TypeRoute: TypeRoute,
  ProductCreateRoute: ProductCreateRoute,
  ProductIndexRoute: ProductIndexRoute,
  ProductProductIdEditRoute: ProductProductIdEditRoute
}

export const routeTree = rootRoute._addFileChildren(rootRouteChildren)._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/type",
        "/product/create",
        "/product/",
        "/product/$productId/edit"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/type": {
      "filePath": "type.tsx"
    },
    "/product/create": {
      "filePath": "product/create.tsx"
    },
    "/product/": {
      "filePath": "product/index.tsx"
    },
    "/product/$productId/edit": {
      "filePath": "product/$productId/edit.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
